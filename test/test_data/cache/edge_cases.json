{
  "2025-06-14T11:00:00Z": [
    {
      "parentUuid": null,
      "isSidechain": false,
      "userType": "human",
      "cwd": "/tmp",
      "sessionId": "edge_cases",
      "version": "1.0.0",
      "uuid": "edge_001",
      "timestamp": "2025-06-14T11:00:00Z",
      "isMeta": null,
      "type": "user",
      "message": {
        "role": "user",
        "content": [
          {
            "citations": null,
            "text": "Here's a message with some **markdown** formatting, `inline code`, and even a [link](https://example.com). Let's see how it renders!",
            "type": "text"
          }
        ]
      },
      "toolUseResult": null
    }
  ],
  "2025-06-14T11:00:30Z": [
    {
      "parentUuid": null,
      "isSidechain": false,
      "userType": "human",
      "cwd": "/tmp",
      "sessionId": "edge_cases",
      "version": "1.0.0",
      "uuid": "edge_002",
      "timestamp": "2025-06-14T11:00:30Z",
      "isMeta": null,
      "type": "assistant",
      "message": {
        "id": "edge_002",
        "type": "message",
        "role": "assistant",
        "model": "claude-3-sonnet-20240229",
        "content": [
          {
            "citations": null,
            "text": "Great example! Markdown formatting is indeed supported. Here are some more examples:\n\n## Headers work too\n\n### Sublevel headers\n\n- Bullet points\n- **Bold text**\n- *Italic text*\n- `inline code`\n\n> Block quotes look nice\n\n```python\n# Code blocks with syntax highlighting\ndef hello_world():\n    print(\"Hello, world!\")\n    return 42\n```\n\n| Tables | Also | Work |\n|--------|------|------|\n| Cell 1 | Cell 2 | Cell 3 |\n| Data   | More  | Info  |\n\nThe markdown renderer handles all of this automatically!",
            "type": "text"
          }
        ],
        "stop_reason": "end_turn",
        "stop_sequence": null,
        "usage": {
          "input_tokens": 35,
          "cache_creation_input_tokens": 0,
          "cache_read_input_tokens": 0,
          "output_tokens": 145,
          "service_tier": "standard",
          "server_tool_use": null
        }
      },
      "requestId": "req_edge_001"
    }
  ],
  "2025-06-14T11:01:00Z": [
    {
      "parentUuid": null,
      "isSidechain": false,
      "userType": "human",
      "cwd": "/tmp",
      "sessionId": "edge_cases",
      "version": "1.0.0",
      "uuid": "edge_003",
      "timestamp": "2025-06-14T11:01:00Z",
      "isMeta": null,
      "type": "user",
      "message": {
        "role": "user",
        "content": [
          {
            "citations": null,
            "text": "Let's test a very long message to see how it handles text wrapping and layout. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.",
            "type": "text"
          }
        ]
      },
      "toolUseResult": null
    }
  ],
  "2025-06-14T11:01:30Z": [
    {
      "parentUuid": null,
      "isSidechain": false,
      "userType": "human",
      "cwd": "/tmp",
      "sessionId": "edge_cases",
      "version": "1.0.0",
      "uuid": "edge_004",
      "timestamp": "2025-06-14T11:01:30Z",
      "isMeta": null,
      "type": "assistant",
      "message": {
        "id": "edge_004",
        "type": "message",
        "role": "assistant",
        "model": "claude-3-sonnet-20240229",
        "content": [
          {
            "id": "tool_edge_001",
            "input": {
              "test_param": "This tool will fail to demonstrate error handling"
            },
            "name": "FailingTool",
            "type": "tool_use"
          }
        ],
        "stop_reason": "tool_use",
        "stop_sequence": null,
        "usage": {
          "input_tokens": 200,
          "cache_creation_input_tokens": 0,
          "cache_read_input_tokens": 0,
          "output_tokens": 25,
          "service_tier": "standard",
          "server_tool_use": null
        }
      },
      "requestId": "req_edge_002"
    }
  ],
  "2025-06-14T11:01:31Z": [
    {
      "parentUuid": null,
      "isSidechain": false,
      "userType": "human",
      "cwd": "/tmp",
      "sessionId": "edge_cases",
      "version": "1.0.0",
      "uuid": "edge_005",
      "timestamp": "2025-06-14T11:01:31Z",
      "isMeta": null,
      "type": "user",
      "message": {
        "role": "user",
        "content": [
          {
            "type": "tool_result",
            "tool_use_id": "tool_edge_001",
            "content": "Error: Tool execution failed with error: Command not found",
            "is_error": true
          }
        ]
      },
      "toolUseResult": "Error: Tool execution failed with error: Command not found"
    }
  ],
  "2025-06-14T11:02:00Z": [
    {
      "parentUuid": null,
      "isSidechain": false,
      "userType": "human",
      "cwd": "/tmp",
      "sessionId": "edge_cases",
      "version": "1.0.0",
      "uuid": "edge_006",
      "timestamp": "2025-06-14T11:02:00Z",
      "isMeta": null,
      "type": "user",
      "message": {
        "role": "user",
        "content": [
          {
            "citations": null,
            "text": "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to.",
            "type": "text"
          }
        ]
      },
      "toolUseResult": null
    }
  ],
  "2025-06-14T11:02:10Z": [
    {
      "parentUuid": null,
      "isSidechain": false,
      "userType": "human",
      "cwd": "/tmp",
      "sessionId": "edge_cases",
      "version": "1.0.0",
      "uuid": "edge_007",
      "timestamp": "2025-06-14T11:02:10Z",
      "isMeta": null,
      "type": "user",
      "message": {
        "role": "user",
        "content": [
          {
            "citations": null,
            "text": "<command-name>test-command</command-name><command-args>--verbose --output /tmp/test.log</command-args><command-message>Running a test command to verify system functionality</command-message><command-contents>{\"text\": \"This is the actual command content with some JSON structure and escaped characters: \\\"quotes\\\" and \\nline breaks\\n\"}</command-contents>",
            "type": "text"
          }
        ]
      },
      "toolUseResult": null
    }
  ],
  "2025-06-14T11:02:20Z": [
    {
      "parentUuid": null,
      "isSidechain": false,
      "userType": "human",
      "cwd": "/tmp",
      "sessionId": "edge_cases",
      "version": "1.0.0",
      "uuid": "edge_008",
      "timestamp": "2025-06-14T11:02:20Z",
      "isMeta": null,
      "type": "user",
      "message": {
        "role": "user",
        "content": [
          {
            "citations": null,
            "text": "<local-command-stdout>Command output here:\nLine 1 of output\nLine 2 of output\nSome data: 12345\nStatus: SUCCESS\nTimestamp: 2025-06-14T11:02:20Z</local-command-stdout>",
            "type": "text"
          }
        ]
      },
      "toolUseResult": null
    }
  ],
  "2025-06-14T11:03:00Z": [
    {
      "parentUuid": null,
      "isSidechain": false,
      "userType": "human",
      "cwd": "/tmp",
      "sessionId": "edge_cases",
      "version": "1.0.0",
      "uuid": "edge_009",
      "timestamp": "2025-06-14T11:03:00Z",
      "isMeta": null,
      "type": "assistant",
      "message": {
        "id": "edge_009",
        "type": "message",
        "role": "assistant",
        "model": "claude-3-sonnet-20240229",
        "content": [
          {
            "citations": null,
            "text": "I see the long Lorem ipsum text wraps nicely! Long text handling is important for readability. The CSS should handle word wrapping automatically.",
            "type": "text"
          },
          {
            "id": "tool_edge_002",
            "input": {
              "file_path": "/tmp/complex_example.py",
              "edits": [
                {
                  "old_string": "",
                  "new_string": "#!/usr/bin/env python3\n\"\"\"\nComplex example with multiple operations.\n\"\"\"\n\nimport json\nimport sys\nfrom typing import List, Dict, Any\n\ndef process_data(items: List[Dict[str, Any]]) -> None:\n    \"\"\"\n    Process a list of data items.\n    \"\"\"\n    for item in items:\n        print(f\"Processing: {item['name']}\")\n        if item.get('active', False):\n            print(f\"  Status: Active\")\n        else:\n            print(f\"  Status: Inactive\")\n\nif __name__ == \"__main__\":\n    sample_data = [\n        {\"name\": \"Item 1\", \"active\": True},\n        {\"name\": \"Item 2\", \"active\": False},\n        {\"name\": \"Item 3\", \"active\": True}\n    ]\n    process_data(sample_data)"
                }
              ]
            },
            "name": "MultiEdit",
            "type": "tool_use"
          }
        ],
        "stop_reason": "tool_use",
        "stop_sequence": null,
        "usage": {
          "input_tokens": 85,
          "cache_creation_input_tokens": 0,
          "cache_read_input_tokens": 0,
          "output_tokens": 180,
          "service_tier": "standard",
          "server_tool_use": null
        }
      },
      "requestId": "req_edge_003"
    }
  ],
  "2025-06-14T11:03:30Z": [
    {
      "parentUuid": null,
      "isSidechain": false,
      "userType": "human",
      "cwd": "/tmp",
      "sessionId": "edge_cases",
      "version": "1.0.0",
      "uuid": "edge_011",
      "timestamp": "2025-06-14T11:03:30Z",
      "isMeta": null,
      "type": "user",
      "message": {
        "role": "user",
        "content": [
          {
            "citations": null,
            "text": "Testing special characters: caf\u00e9, na\u00efve, r\u00e9sum\u00e9, \u4e2d\u6587, \u0627\u0644\u0639\u0631\u0628\u064a\u0629, \u0440\u0443\u0441\u0441\u043a\u0438\u0439, \ud83c\udf89 emojis \ud83d\ude80 and symbols \u2211\u2206\u221a\u03c0\u221e",
            "type": "text"
          }
        ]
      },
      "toolUseResult": null
    }
  ],
  "2025-06-14T10:02:00Z": [
    {
      "parentUuid": "assistant_003",
      "isSidechain": false,
      "userType": "external",
      "cwd": "/tmp",
      "sessionId": "todowrite_session",
      "version": "1.0.24",
      "uuid": "assistant_004",
      "timestamp": "2025-06-14T10:02:00Z",
      "isMeta": null,
      "type": "assistant",
      "message": {
        "id": "msg_004",
        "type": "message",
        "role": "assistant",
        "model": "claude-sonnet-4",
        "content": [
          {
            "id": "toolu_todowrite_002",
            "input": {
              "todos": [
                "broken_todo",
                {
                  "id": "2",
                  "content": "Implement core functionality",
                  "status": "in_progress",
                  "priority": "high"
                },
                {
                  "id": "3",
                  "content": "Add comprehensive tests",
                  "status": "pending",
                  "priority": "medium"
                },
                {
                  "id": "4",
                  "content": "Write user documentation",
                  "status": "pending",
                  "priority": "low"
                },
                {
                  "id": "5",
                  "content": "Perform code review",
                  "status": "pending",
                  "priority": "medium"
                }
              ]
            },
            "name": "TodoWrite",
            "type": "tool_use"
          }
        ],
        "stop_reason": null,
        "stop_sequence": null,
        "usage": {
          "input_tokens": 168,
          "cache_creation_input_tokens": null,
          "cache_read_input_tokens": null,
          "output_tokens": 85,
          "service_tier": null,
          "server_tool_use": null
        }
      },
      "requestId": "req_004"
    }
  ],
  "2025-06-14T11:03:01Z": [
    {
      "parentUuid": null,
      "isSidechain": false,
      "userType": "human",
      "cwd": "/tmp",
      "sessionId": "edge_cases",
      "version": "1.0.0",
      "uuid": "edge_010",
      "timestamp": "2025-06-14T11:03:01Z",
      "isMeta": null,
      "type": "user",
      "message": {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "wow error"
          }
        ]
      },
      "toolUseResult": "File created successfully at: /tmp/complex_example.py"
    }
  ],
  "_no_timestamp": [
    {
      "type": "summary",
      "summary": "Tested various edge cases including markdown formatting, long text, tool errors, system messages, command outputs, special characters and emojis. All message types render correctly in the transcript viewer.",
      "leafUuid": "edge_011",
      "cwd": null
    }
  ]
}